@using Microsoft.AspNet.Identity;
@model PagedList.IPagedList<QnA.Models.Questions>
@using PagedList.Mvc;

@{
    ViewBag.Title = "QnA - Questions and Answers";
}

@if (Model.TotalItemCount == 0) {
    <h3>No Results Found.</h3>
} else
{
    <div class="sort">
        @if (ViewBag.q != null)
        {
            <a href="@Url.Action("Index", new {q = ViewBag.q, param = ViewBag.param, sort = "newer"})" class="btn @(ViewBag.CurrentSort == "newer" ? "btn-primary" : "btn-default")">Newer</a>
            <a href="@Url.Action("Index", new {q = ViewBag.q, param = ViewBag.param, sort = "older" })" class="btn @(ViewBag.CurrentSort == "older" ? "btn-primary" : "btn-default")">Older</a>
            <a href="@Url.Action("Index", new {q = ViewBag.q, param = ViewBag.param, sort = "moreVotes" })" class="btn @(ViewBag.CurrentSort == "moreVotes" ? "btn-primary" : "btn-default")">More Votes</a>
            <a href="@Url.Action("Index", new {q = ViewBag.q, param = ViewBag.param, sort = "lessVotes" })" class="btn @(ViewBag.CurrentSort == "lessVotes" ? "btn-primary" : "btn-default")">Less Votes</a>
            <a href="@Url.Action("Index", new {q = ViewBag.q, param = ViewBag.param, sort = "moreViews" })" class="btn @(ViewBag.CurrentSort == "moreViews" ? "btn-primary" : "btn-default")">More Views</a>
            <a href="@Url.Action("Index", new {q = ViewBag.q, param = ViewBag.param, sort = "lessViews" })" class="btn @(ViewBag.CurrentSort == "lessViews" ? "btn-primary" : "btn-default")">Less Views</a>
        }
        else
        {
            <a href="@Url.Action("Index", new { sort = "newer"})" class="btn @(ViewBag.CurrentSort == "newer" ? "btn-primary" : "btn-default")">Newer</a>
            <a href="@Url.Action("Index", new { sort = "older" })" class="btn @(ViewBag.CurrentSort == "older" ? "btn-primary" : "btn-default")">Older</a>
            <a href="@Url.Action("Index", new { sort = "moreVotes" })" class="btn @(ViewBag.CurrentSort == "moreVotes" ? "btn-primary" : "btn-default")">More Votes</a>
            <a href="@Url.Action("Index", new { sort = "lessVotes" })" class="btn @(ViewBag.CurrentSort == "lessVotes" ? "btn-primary" : "btn-default")">Less Votes</a>
            <a href="@Url.Action("Index", new { sort = "moreViews" })" class="btn @(ViewBag.CurrentSort == "moreViews" ? "btn-primary" : "btn-default")">More Views</a>
            <a href="@Url.Action("Index", new { sort = "lessViews" })" class="btn @(ViewBag.CurrentSort == "lessViews" ? "btn-primary" : "btn-default")">Less Views</a>
        }
    </div>
    <div id="questions">
        @foreach (var item in Model)
        {
            <div class="entry">
                @if (User.Identity.IsAuthenticated)
                {
                    string btnPositive = "btn-default";
                    string btnNegative = "btn-default";
                    if (item.QuestionsVotes.Count > 0)
                    {
                        var currentUserQuestion = item.QuestionsVotes.Where(q => q.UserID == User.Identity.GetUserId() && q.QuestionID == item.ID).First();
                        btnPositive = currentUserQuestion.VotedPositive == true ? "btn-primary" : "btn-default";
                        btnNegative = currentUserQuestion.VotedNegative == true ? "btn-primary" : "btn-default";
                    }
                    <div class="pull-left votes">
                        <div class="btn-group-vertical" role="group" aria-label="...">
                            @using (Html.BeginForm("Upvote", "Question", new { id = item.ID }))
                            {
                                @Html.AntiForgeryToken()
                                <button type = "submit" class="btn btn-xs @btnPositive">
                                    &#x25B2;
                                </button>
                            }

                            <p class="votes-number">@Html.DisplayFor(modelItem => item.Votes)</p>

                            @using (Html.BeginForm("Downvote", "Question", new { id = item.ID }))
                            {
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-xs @btnNegative">
                                    &#x25BC;
                                </button>
                            }
                        </div>
                    </div>
                }
                <div class="thing">
                    <h3 class="title">
                        <a href="@Url.Action("Question", "Question", new { id = item.ID })">@Html.DisplayFor(modelItem => item.Title)</a>
                    </h3>
                    <h6 class="info">
                        Date: @Html.DisplayFor(modelItem => item.Date) |
                        User: @Html.DisplayFor(modelItem => item.User.UserName) |
                        Votes: @Html.DisplayFor(modelItem => item.Votes) |
                        Views: @Html.DisplayFor(modelItem => item.Views) |
                        Answers: @Html.DisplayFor(modelItem => item.Answers.Count)
                    </h6>
                    <h6 class="info">
                        @Html.ActionLink("View More", "Question", "Question", new { id = item.ID }, null)
                        @if (item.UserID == User.Identity.GetUserId() || User.IsInRole("Administrator"))
                        {
                            @: |
                            @Html.ActionLink("Edit", "Edit", "Question", new { id = item.ID }, null)
                            @: |
                            @Html.ActionLink("Delete", "Delete", "Question", new { id = item.ID }, null)
                        }
                    </h6>
                </div>
                <div class="clearfix"></div>
            </div>
        }
    </div>
    <div id="navigation-bottom">
        <p>
            Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
            @if (ViewBag.q != null)
            {
                @Html.PagedListPager(Model, page => Url.Action("Index", new { q = ViewBag.q, param = ViewBag.param, page }))
            }
            else
            {
                @Html.PagedListPager(Model, page => Url.Action("Index", new { page }))
            }
        </p>
    </div>
}

