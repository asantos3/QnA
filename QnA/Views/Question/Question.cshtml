@using Microsoft.AspNet.Identity;
@model QnA.Models.QuestionsAnswersViewModel

@{
    ViewBag.Title = "Question - " + Model.Questions.Title;
    Model.Answers = new QnA.Models.Answers();
    Model.Answers.QuestionID = Model.Questions.ID;
}

<div id="navigation-top">
    <ol class="breadcrumb">
        <li><a href="@Url.Action("Index", "Home")">Home</a></li>
        <li class="active">Question #@Html.Raw(Model.Questions.ID)</li>
    </ol>
</div>
<hr />

<div class="entry">
    @if (User.Identity.IsAuthenticated)
    {
        string btnPositive = "btn-default";
        string btnNegative = "btn-default";
        if (Model.Questions.QuestionsVotes.Count > 0)
        {
            var currentUserQuestion = Model.Questions.QuestionsVotes.Where(q => q.UserID == User.Identity.GetUserId() && q.QuestionID == Model.Questions.ID).First();
            btnPositive = currentUserQuestion.VotedPositive == true ? "btn-primary" : "btn-default";
            btnNegative = currentUserQuestion.VotedNegative == true ? "btn-primary" : "btn-default";
        }
        <div class="pull-left votes">
            <div class="btn-group-vertical" role="group" aria-label="...">
                @using (Html.BeginForm("Upvote", "Question", new { id = Model.Questions.ID }))
                {
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-xs @btnPositive">
                        &#x25B2;
                    </button>
                }

                <p class="votes-number">@Html.DisplayFor(model => model.Questions.Votes)</p>

                @using (Html.BeginForm("Downvote", "Question", new { id = Model.Questions.ID }))
                {
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-xs @btnNegative">
                        &#x25BC;
                    </button>
                }
            </div>
        </div>
    }
    <div class="thing">
        <h3 class="title">
            @Html.DisplayFor(modelItem => Model.Questions.Title)
        </h3>
        <h6 class="info">
            Date: @Html.DisplayFor(model => model.Questions.Date) |
            User: @Html.DisplayFor(model => model.Questions.User.UserName) |
            Votes: @Html.DisplayFor(model => model.Questions.Votes) |
            Views: @Html.DisplayFor(model => model.Questions.Views) |
            Answers: @Html.DisplayFor(model => model.Questions.Answers.Count)
        </h6>
        <h6 class="info">
            @if (Model.Questions.UserID == User.Identity.GetUserId() || User.IsInRole("Administrator"))
            {
                @Html.ActionLink("Edit", "Edit", new { id = Model.Questions.ID })
                @: |
                @Html.ActionLink("Delete", "Delete", new { id = Model.Questions.ID })
            }
        </h6>
        <div class="content">
            @Html.DisplayFor(model => model.Questions.Content)
        </div>
    </div>
    <div class="clearfix"></div>
</div>

<hr />

@if (Model.Questions.Answers.Count == 0)
{
    <h4>There are no answers for this question.</h4>
}
@if (User.Identity.IsAuthenticated)
{
    <div id="answerForm">
        @using (Html.BeginForm("Question"))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Answers.Content, "Answer this question here:", htmlAttributes: new { @class = "control-label" })
                <p>@Html.ValidationMessageFor(model => model.Answers.Content, "", new { @class = "text-danger" })</p>
                @Html.EditorFor(model => model.Answers.Content, new { htmlAttributes = new { @class = "form-control", @rows = 8 } })
                @Html.HiddenFor(model => model.Answers.QuestionID)
                <input type="submit" value="Answer" class="btn btn-default" />
            </div>
        }
    </div>
}
@if (Model.Questions.Answers.Count > 0)
{
    <hr />

    <h4>Answers</h4>

    <div id="answers">
        
        @foreach (var item in Model.Questions.Answers.OrderByDescending(i => i.Date))
        {
            <div class="entry">
                @if (User.Identity.IsAuthenticated)
                {
                    string btnPositive = "btn-default";
                    string btnNegative = "btn-default";
                if (item.AnswersVotes.Count > 0)
                {
                    var currentUserQuestion = item.AnswersVotes.Where(q => q.UserID == User.Identity.GetUserId() && q.AnswerID == item.ID).First();
                    btnPositive = currentUserQuestion.VotedPositive == true ? "btn-primary" : "btn-default";
                    btnNegative = currentUserQuestion.VotedNegative == true ? "btn-primary" : "btn-default";
                }
                <div class="pull-left votes">
                    <div class="btn-group-vertical" role="group" aria-label="...">
                        @using (Html.BeginForm("Upvote", "Answer", new { id = item.ID }))
                        {
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-xs @btnPositive">
                                &#x25B2;
                            </button>
                        }

                        <p class="votes-number">@Html.DisplayFor(modelItem => item.Votes)</p>

                        @using (Html.BeginForm("Downvote", "Answer", new { id = item.ID }))
                        {
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-xs @btnNegative">
                                &#x25BC;
                            </button>
                        }
                    </div>
                </div>
                }
                <div class="thing">
                    <h6 class="info">
                        Date: @Html.DisplayFor(modelItem => item.Date) |
                        User: @Html.DisplayFor(modelItem => item.User.UserName) |
                        Votes: @Html.DisplayFor(modelItem => item.Votes)
                    </h6>
                    <h6 class="info">
                        @if (item.UserID == User.Identity.GetUserId() || User.IsInRole("Administrator"))
                        {
                            @Html.ActionLink("Edit", "Edit", "Answer", new { id = item.ID }, null)
                            @: |
                            @Html.ActionLink("Delete", "Delete", "Answer", new { id = item.ID }, null)
                        }
                    </h6>
                    <div class="content">
                        @Html.DisplayFor(modelItem => item.Content)
                    </div>
                </div>
                <div class="clearfix"></div>
            </div>
        }
    </div>
}

